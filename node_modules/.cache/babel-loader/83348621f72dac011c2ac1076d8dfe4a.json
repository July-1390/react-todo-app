{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/july/Desktop/study/my-todo/my-todo-app/src/components/Todo.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { AiOutlineEdit } from \"react-icons/ai\";\nimport { AiOutlineCloseCircle } from \"react-icons/ai\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\n\nfunction Todo({\n  todo,\n  updateTodo,\n  removeTodo\n}) {\n  _s();\n\n  const displayMode = \"displayMode\";\n  const editMode = \"editMode\";\n  const [mode, setMode] = useState(displayMode);\n  const [newTodoText, setNewTodoText] = useState(todo.text);\n  const StyledList = styled.li`\n    background-color: ${props => props.isDragging ? \" #657153\" : \"transparent\"};\n    cursor: ${props => props.isDragging ? \"grab;\" : \"pointer;\"};\n    box-shadow: ${props => props.isDragging ? \"0px 1px 2px  #657153;\" : \"0px 2px 3px  #657153;\"};\n  `;\n\n  const onEditButtonClick = e => {\n    e.preventDefault();\n    setMode(editMode);\n  };\n\n  const onSubmitButtonClick = e => {\n    e.preventDefault();\n    const newTodo = todo;\n    newTodo.text = newTodoText;\n    updateTodo(todo.id, newTodo);\n    setMode(displayMode);\n  };\n\n  if (mode === displayMode) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: todo.id,\n        children: provided => /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"characters\",\n          ...provided.droppableProps,\n          ref: provided.innerRef,\n          children: [mode.map((todo, index) => {\n            return /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: todo.id.toString(),\n              index: index,\n              children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(StyledList, {\n                ref: provided.innerRef,\n                isDragging: snapshot.isDragging,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"todo-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: todo.text\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 63,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"icon-edit\",\n                    children: /*#__PURE__*/_jsxDEV(AiOutlineEdit, {\n                      onClick: onEditButtonClick\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 65,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 64,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"icon-delete\",\n                    children: /*#__PURE__*/_jsxDEV(AiOutlineCloseCircle, {\n                      onClick: () => removeTodo(todo.id)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 68,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 67,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 23\n              }, this)\n            }, todo.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 19\n            }, this);\n          }), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  } else if (mode === editMode) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"submit-todo-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Update your todo\",\n          className: \"submit-todo-input\",\n          onChange: event => setNewTodoText(event.target.value),\n          value: newTodoText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button-submit\",\n          onClick: onSubmitButtonClick,\n          children: /*#__PURE__*/_jsxDEV(FaCheck, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n}\n\n_s(Todo, \"+AQfQCvs1SIQ24EyPyt0WXxqbJw=\");\n\n_c = Todo;\nexport default Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["/Users/july/Desktop/study/my-todo/my-todo-app/src/components/Todo.jsx"],"names":["React","useState","AiOutlineEdit","AiOutlineCloseCircle","FaCheck","Droppable","Draggable","styled","Todo","todo","updateTodo","removeTodo","displayMode","editMode","mode","setMode","newTodoText","setNewTodoText","text","StyledList","li","props","isDragging","onEditButtonClick","e","preventDefault","onSubmitButtonClick","newTodo","id","provided","droppableProps","innerRef","map","index","toString","snapshot","draggableProps","dragHandleProps","placeholder","event","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { AiOutlineEdit } from \"react-icons/ai\";\nimport { AiOutlineCloseCircle } from \"react-icons/ai\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\n\nfunction Todo({ todo, updateTodo, removeTodo }) {\n  const displayMode = \"displayMode\";\n  const editMode = \"editMode\";\n\n  const [mode, setMode] = useState(displayMode);\n\n  const [newTodoText, setNewTodoText] = useState(todo.text);\n\n  const StyledList = styled.li`\n    background-color: ${(props) =>\n      props.isDragging ? \" #657153\" : \"transparent\"};\n    cursor: ${(props) => (props.isDragging ? \"grab;\" : \"pointer;\")};\n    box-shadow: ${(props) =>\n      props.isDragging ? \"0px 1px 2px  #657153;\" : \"0px 2px 3px  #657153;\"};\n  `;\n\n  const onEditButtonClick = (e) => {\n    e.preventDefault();\n    setMode(editMode);\n  };\n\n  const onSubmitButtonClick = (e) => {\n    e.preventDefault();\n    const newTodo = todo;\n    newTodo.text = newTodoText;\n\n    updateTodo(todo.id, newTodo);\n    setMode(displayMode);\n  };\n\n  if (mode === displayMode) {\n    return (\n      <>\n        <Droppable droppableId={todo.id}>\n          {(provided) => (\n            <ul\n              className=\"characters\"\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n            >\n              {mode.map((todo, index) => {\n                return (\n                  <Draggable\n                    key={todo.id}\n                    draggableId={todo.id.toString()}\n                    index={index}\n                  >\n                    {(provided, snapshot) => (\n                      <StyledList\n                        ref={provided.innerRef}\n                        isDragging={snapshot.isDragging}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                      >\n                        <div className=\"todo-item\">\n                          <p>{todo.text}</p>\n                          <div className=\"icon-edit\">\n                            <AiOutlineEdit onClick={onEditButtonClick} />\n                          </div>\n                          <div className=\"icon-delete\">\n                            <AiOutlineCloseCircle\n                              onClick={() => removeTodo(todo.id)}\n                            />\n                          </div>\n                        </div>\n                      </StyledList>\n                    )}\n                  </Draggable>\n                );\n              })}\n              {provided.placeholder}\n            </ul>\n          )}\n        </Droppable>\n        {/* <div className=\"todo-item\">\n          <p>{todo.text}</p>\n          <div className=\"icon-edit\">\n            <AiOutlineEdit onClick={onEditButtonClick} />\n          </div>\n          <div className=\"icon-delete\">\n            <AiOutlineCloseCircle onClick={() => removeTodo(todo.id)} />\n          </div>\n        </div> */}\n      </>\n    );\n  } else if (mode === editMode) {\n    return (\n      <>\n        <form className=\"submit-todo-form\">\n          <input\n            type=\"text\"\n            placeholder=\"Update your todo\"\n            className=\"submit-todo-input\"\n            onChange={(event) => setNewTodoText(event.target.value)}\n            value={newTodoText}\n          />\n          <button className=\"button-submit\" onClick={onSubmitButtonClick}>\n            <FaCheck />\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nexport default Todo;\n"]},"metadata":{},"sourceType":"module"}