{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/july/Desktop/study/my-todo/my-todo-app/src/components/Todo.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { AiOutlineEdit } from \"react-icons/ai\";\nimport { AiOutlineCloseCircle } from \"react-icons/ai\";\nimport { FaCheck } from \"react-icons/fa\";\n\nfunction Todo({\n  todo,\n  updateTodo,\n  removeTodo,\n  isHighlighted,\n  completeTodo\n}) {\n  _s();\n\n  const displayMode = \"displayMode\";\n  const editMode = \"editMode\";\n  const [mode, setMode] = useState(displayMode);\n  const [newTodoText, setNewTodoText] = useState(todo.text);\n\n  const onEditButtonClick = e => {\n    e.preventDefault();\n    setMode(editMode);\n  };\n\n  const onSubmitButtonClick = e => {\n    e.preventDefault();\n    const newTodo = todo;\n    newTodo.text = newTodoText;\n    updateTodo(todo.id, newTodo);\n    setMode(displayMode);\n  };\n\n  if (mode === displayMode) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `todo-item  ${isHighlighted ? \"highlightedTodo\" : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"checkbox\",\n          onClick: () => completeTodo(todo.id) && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 76\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `todo-text ${todo.isCompleted && 'todo-is-completed'}`,\n          children: todo.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icon-edit\",\n          children: /*#__PURE__*/_jsxDEV(AiOutlineEdit, {\n            onClick: onEditButtonClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icon-delete\",\n          children: /*#__PURE__*/_jsxDEV(AiOutlineCloseCircle, {\n            onClick: () => removeTodo(todo.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  } else if (mode === editMode) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"submit-todo-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Update your todo\",\n          className: \"submit-todo-input\",\n          onChange: event => setNewTodoText(event.target.value),\n          value: newTodoText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button-submit\",\n          onClick: onSubmitButtonClick,\n          children: /*#__PURE__*/_jsxDEV(FaCheck, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n}\n\n_s(Todo, \"+AQfQCvs1SIQ24EyPyt0WXxqbJw=\");\n\n_c = Todo;\nexport default Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["/Users/july/Desktop/study/my-todo/my-todo-app/src/components/Todo.jsx"],"names":["React","useState","AiOutlineEdit","AiOutlineCloseCircle","FaCheck","Todo","todo","updateTodo","removeTodo","isHighlighted","completeTodo","displayMode","editMode","mode","setMode","newTodoText","setNewTodoText","text","onEditButtonClick","e","preventDefault","onSubmitButtonClick","newTodo","id","isCompleted","event","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { AiOutlineEdit } from \"react-icons/ai\";\nimport { AiOutlineCloseCircle } from \"react-icons/ai\";\nimport { FaCheck } from \"react-icons/fa\";\n\nfunction Todo({ todo, updateTodo, removeTodo, isHighlighted, completeTodo }) {\n  const displayMode = \"displayMode\";\n  const editMode = \"editMode\";\n\n  const [mode, setMode] = useState(displayMode);\n\n  const [newTodoText, setNewTodoText] = useState(todo.text);\n\n  const onEditButtonClick = (e) => {\n    e.preventDefault();\n    setMode(editMode);\n  };\n\n  const onSubmitButtonClick = (e) => {\n    e.preventDefault();\n    const newTodo = todo;\n    newTodo.text = newTodoText;\n\n    updateTodo(todo.id, newTodo);\n    setMode(displayMode);\n  };\n\n  if (mode === displayMode) {\n    return (\n      <>\n        <div className={`todo-item  ${isHighlighted ? \"highlightedTodo\" : \"\"}`}>\n        <div className='checkbox' onClick={() => completeTodo(todo.id) && (<span>+</span>)} />\n          <div className={`todo-text ${todo.isCompleted && 'todo-is-completed'}`}>\n            {todo.text}                       \n          </div>\n          <div className=\"icon-edit\">\n            <AiOutlineEdit onClick={onEditButtonClick} />\n          </div>\n          <div className=\"icon-delete\">\n            <AiOutlineCloseCircle onClick={() => removeTodo(todo.id)} />\n          </div>\n        </div>\n      </>\n    );\n  } else if (mode === editMode) {\n    return (\n      <>\n        <form className=\"submit-todo-form\">\n          <input\n            type=\"text\"\n            placeholder=\"Update your todo\"\n            className=\"submit-todo-input\"\n            onChange={(event) => setNewTodoText(event.target.value)}\n            value={newTodoText}\n          />\n          <button className=\"button-submit\" onClick={onSubmitButtonClick}>\n            <FaCheck />\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nexport default Todo;\n"]},"metadata":{},"sourceType":"module"}