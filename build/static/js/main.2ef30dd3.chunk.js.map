{"version":3,"sources":["components/TodoForm.jsx","components/Todo.jsx","components/TodoList.jsx","App.js","index.js"],"names":["TodoForm","createTodo","useState","newTodoValue","setNewTodoValue","className","type","placeholder","onChange","event","target","value","onClick","e","preventDefault","Todo","todo","updateTodo","removeTodo","isHighlighted","completeTodo","displayMode","editMode","mode","setMode","text","newTodoText","setNewTodoText","isCompleted","checked","setChecked","useStyles","makeStyles","root","backgroundColor","icon","marginRight","borderRadius","width","height","boxShadow","backgroundImage","outline","outlineOffset","background","checkedIcon","display","content","StyledCheckbox","props","classes","Checkbox","id","disableRipple","color","clsx","inputProps","newTodo","TodoList","todos","updateTodoList","onDragEnd","result","destination","items","Array","from","splice","source","index","reorderedItem","droppableId","provided","droppableProps","ref","innerRef","map","draggableId","toString","snapshot","draggableProps","dragHandleProps","isDragging","App","setTodos","Math","floor","random","newTodos","filter","updatedTodoComplete","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ef30dd3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"../App.css\";\n\nfunction TodoForm({ createTodo }) {\n  const [newTodoValue, setNewTodoValue] = useState(\"\");\n\n  const handleCreateButtonClick = (e) => {\n    e.preventDefault();\n    createTodo(newTodoValue);\n    setNewTodoValue(\"\");\n  };\n\n  return (\n    <>\n      <form className=\"todo-form\">\n        <h1>What's the plan today?</h1>\n        <input\n          type=\"text\"\n          placeholder=\"Add a todo?\"\n          className=\"todo-input\"\n          onChange={(event) => setNewTodoValue(event.target.value)}\n          value={newTodoValue}\n        />\n        <button className=\"todo-button\" onClick={handleCreateButtonClick}>\n          OK\n        </button>\n      </form>\n    </>\n  );\n}\n\nexport default TodoForm;\n","import React, { useState } from \"react\";\nimport { AiOutlineEdit } from \"react-icons/ai\";\nimport { AiOutlineCloseCircle } from \"react-icons/ai\";\nimport { FaCheck } from \"react-icons/fa\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nfunction Todo({ todo, updateTodo, removeTodo, isHighlighted, completeTodo }) {\n  const displayMode = \"displayMode\";\n  const editMode = \"editMode\";\n\n  const [mode, setMode] = useState(displayMode);\n\n  const [newTodoText, setNewTodoText] = useState(todo.text);\n\n  const [checked, setChecked] = useState(!!todo.isCompleted);\n\n  const onEditButtonClick = (e) => {\n    e.preventDefault();\n    setMode(editMode);\n  };\n\n  const onSubmitButtonClick = (e) => {\n    e.preventDefault();\n    const newTodo = todo;\n    newTodo.text = newTodoText;\n\n    updateTodo(todo.id, newTodo);\n    setMode(displayMode);\n  };\n\n  const useStyles = makeStyles({\n    root: {\n      \"&:hover\": {\n        backgroundColor: \"transparent\",\n      },\n    },\n    icon: {\n      marginRight: 10,\n      borderRadius: 3,\n      width: 18,\n      height: 18,\n      boxShadow:\n        \"inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)\",\n      backgroundColor: \"#f5f8fa\",\n      backgroundImage:\n        \"linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))\",\n      \"$root.Mui-focusVisible &\": {\n        outline: \"2px auto rgba(112,138,98,54)\",\n        outlineOffset: 2,\n      },\n      \"input:hover ~ &\": {\n        backgroundColor: \"#ebf1f5\",\n      },\n      \"input:disabled ~ &\": {\n        boxShadow: \"none\",\n        background: \"rgba(206,217,224,.5)\",\n      },\n    },\n    checkedIcon: {\n      backgroundColor: \"#8AAA79\",\n      backgroundImage:\n        \"linear-gradient(180deg,hsla(0,0%,100%,.1),hsla(0,0%,100%,0))\",\n      \"&:before\": {\n        display: \"block\",\n        width: 18,\n        height: 18,\n        backgroundImage:\n          \"url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath\" +\n          \" fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 \" +\n          \"1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\\\")\",\n        content: '\"\"',\n      },\n      \"input:hover ~ &\": {\n        backgroundColor: \"#708A62\",\n      },\n    },\n  });\n\n  const StyledCheckbox = (props) => {\n    const classes = useStyles();\n    return (\n      <Checkbox\n        className={classes.root}\n        onClick={() => completeTodo(todo.id)}\n        onChange={() => setChecked(!checked)}\n        checked={checked}\n        disableRipple\n        color=\"default\"\n        checkedIcon={\n          <span className={clsx(classes.icon, classes.checkedIcon)} />\n        }\n        icon={<span className={classes.icon} />}\n        inputProps={{ \"aria-label\": \"decorative checkbox\" }}\n        {...props}\n      />\n    );\n  };\n\n  if (mode === displayMode) {\n    return (\n      <>\n        <div className={`todo-item  ${isHighlighted ? \"highlightedTodo\" : \"\"}`}>\n          <StyledCheckbox />\n          <div\n            className={`todo-text ${todo.isCompleted && \"todo-is-completed\"}`}\n          >\n            {todo.text}\n          </div>\n          <div className={`icon-edit ${todo.isCompleted ? 'icon-edit-completed' : ''}`}>\n            <AiOutlineEdit onClick={onEditButtonClick} />\n          </div>\n          <div className={`icon-delete ${todo.isCompleted ? 'icon-delete-completed' : ''}`}>\n            <AiOutlineCloseCircle onClick={() => removeTodo(todo.id)} />\n          </div>\n        </div>\n      </>\n    );\n  } else if (mode === editMode) {\n    return (\n      <>\n        <form className=\"submit-todo-form\">\n          <input\n            type=\"text\"\n            placeholder=\"Update your todo\"\n            className=\"submit-todo-input\"\n            onChange={(event) => setNewTodoText(event.target.value)}\n            value={newTodoText}\n          />\n          <button className=\"button-submit\" onClick={onSubmitButtonClick}>\n            <FaCheck />\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nexport default Todo;\n","import React from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport Todo from \"./Todo\";\n\nfunction TodoList({\n  todos,\n  removeTodo,\n  updateTodo,\n  updateTodoList,\n  completeTodo\n}) {\n  const handleOnDragEnd = (result) => {\n    if (!result.destination) return;\n\n    const items = Array.from(todos);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n\n    updateTodoList(items);\n  };\n\n  return (\n    <>\n      <DragDropContext onDragEnd={handleOnDragEnd}>\n        <Droppable droppableId=\"todo-list\">\n          {(provided) => (\n            <div\n              className=\"todo-list\"\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n            >\n              {todos.map((todo, index) => {\n                return (\n                  <Draggable\n                    key={todo.id}\n                    draggableId={todo.id.toString()}\n                    index={index}\n                  >\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                      >\n                        <Todo\n                          todo={todo}\n                          updateTodo={updateTodo}\n                          removeTodo={removeTodo}\n                          completeTodo={completeTodo}\n                          isHighlighted={snapshot.isDragging}\n                        />\n                      </div>\n                    )}\n                  </Draggable>\n                );\n              })}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </>\n  );\n}\n\nexport default TodoList;\n","import React, {useState} from \"react\";\nimport TodoForm from './components/TodoForm'\nimport TodoList from \"./components/TodoList\";\nimport \"./App.css\";\n\n\nfunction App() {\n\n  const defaultTodos = [\n    {\n      id: 1,\n      text: \"walk with a dog\",\n      isCompleted: false,\n    },\n    {\n      id: 2,\n      text: \"buy bread\",\n      isCompleted: true,\n    },\n  ];\n  \n  const [todos, setTodos] = useState(defaultTodos);\n\n  const createTodo = (text) => {\n    if (text === \"\") {\n      return;\n    }\n\n    const newTodo = {\n      id: Math.floor(Math.random() * 10000),\n      text: text,\n      isCompleted: false,\n    };\n\n    const newTodos = [...todos, newTodo];\n\n    setTodos(newTodos);\n  };\n\n  const removeTodo = (id) => {\n    const newTodos = todos.filter((todo) => todo.id !== id);\n    setTodos(newTodos);\n  };\n\n  const updateTodo = (id, newTodo) => {\n    const newTodos = todos.map((todo) => {\n      if (todo.id === id) {\n        return newTodo;\n      }\n      return todo;\n    });\n    setTodos(newTodos);\n  };\n\n  const completeTodo = (id) => {\n    const updatedTodoComplete = todos.map(todo => {\n      if(todo.id === id) {\n        todo.isCompleted = !todo.isCompleted\n      }\n      return todo\n    })\n    setTodos(updatedTodoComplete);\n  }\n\n  return (\n    <div className='todo-app'>\n      <TodoForm createTodo={createTodo} />\n        <TodoList todos={todos} removeTodo={removeTodo} updateTodo={updateTodo} updateTodoList={setTodos} completeTodo={completeTodo}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}